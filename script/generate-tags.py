#!/usr/bin/env python3
# coding: utf-8
"""Generate Go code for ru_nalog tag descriptors from official document.
Needs env GOPACKAGE provided by `go generate.
"""
import os, sys
import docx.api


TAGS_TABLE_HEADER = ("Тег", "Наименование реквизита", "Тип", "Формат ЭФ",
    "Формат ПФ", "Фикс.", "Длина", "Примечание")
BOOL_SUBSTRING = "принимает значения «1» и «0»"
CELL_DASH = "–"  # special unicode symbol

KINDMAP = {
    "byte[]": "DataKindBytes",
    "stlv": "DataKindSTLV",
    "stlv ": "DataKindSTLV",
    "строка": "DataKindString",
    "byte": "DataKindUint",
    "uint16": "DataKindUint",
    "uint32": "DataKindUint",
    "регистр битов": "DataKindUint",
    "bits": "DataKindUint",
    "vln": "DataKindVLN",
    "fvln": "DataKindFVLN",
    "unixtime": "DataKindTime",
}

OUTPUT_HEADER = """\
// WARNING: This file has automatically been generated
// Code generated by generate-tags.py DO NOT EDIT.

package {package}

var builtinTags = [...]TagDesc{{
""".format(package=os.environ["GOPACKAGE"])


def log(*a, **kw):
    print(*a, **kw, file=sys.stderr)


def select_tags_table(doc):
    for t in doc.tables:
        header = tuple(c.text for c in t.rows[0].cells)
#         log("consider table {}", repr(header))
        if header == TAGS_TABLE_HEADER:
            return t
    raise Exception("tags table not found")


def extract_data(table):
    data = []
    for row in table.rows[1:]:
        rd = tuple(str(c.text) for c in row.cells)
#         log(repr(rd))
        data.append(rd)
    return data


def format_output_line(row, max_length=None):
    tag = row[0]
    name = row[1].strip()
    type_ = row[2].strip().lower()
    fmt_digital = row[3].strip().lower()
    fmt_printed = row[4].strip().lower()
    len_variable = row[5].strip().lower() == "нет"
    length = row[6].strip().lower()
    note = row[7].strip().lower()

    if tag == CELL_DASH or fmt_digital == CELL_DASH:
        return ""

    var_token = "true" if len_variable else "false"
    kind = KINDMAP.get(fmt_digital)
    if BOOL_SUBSTRING in note:
        kind = "DataKindBool"
    if kind is None:
        raise Exception("unknown kind='{}' row={}".format(kindspec, row))
    line = "\t{{{kind}, {tag}, {len}, {var}}},".format(
        kind=kind, tag=tag, len=length, var=var_token,
    )
    if max_length is not None:
        padding = " " * (max_length - len(line))
        return "{}{} // {}".format(line, padding, name)
    return line


def main():
    # TODO argparse
    if len(sys.argv) < 2:
        log("usage: {} filename.docx".format(sys.argv[0]))
        sys.exit(1)
    filename = sys.argv[1]

    doc = docx.api.Document(filename)
    table = select_tags_table(doc)
    data = extract_data(table)

    max_length = max(len(format_output_line(r)) for r in data)
    body = "".join(line + "\n" for line in (format_output_line(r, max_length=max_length) for r in data) if line)

    print(OUTPUT_HEADER + body + "\n}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
